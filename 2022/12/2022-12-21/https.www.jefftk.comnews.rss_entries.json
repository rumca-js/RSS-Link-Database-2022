[{"source": "https://www.jefftk.com/news.rss", "title": "Not Getting Hacked", "description": "<p><span>\n\nA lot of people get hacked or phished, and being completely secure is\nsomewhere between difficult and impossible, especially if someone\ntrying hard to hack you in particular.  But there are several simple\nthings you can do that decrease your risk a lot:\n\n</span>\n\n<p>\n\n</p>\n\n<ul>\n<li><p>Use a password manager that fills in fields automatically.\n</p></li>\n<li><p>Configure 2FA with security keys.\n</p></li>\n<li><p>Read \"sign in with <i>provider</i>\" (oAuth) screens carefully.\n</p></li>\n<li><p>Encrypt your laptop.\n</p></li>\n<li><p>Be cautious with inbound communication.\n</p></li>\n</ul>\n\n\n\n<p>\n\nWhy these things?  You can make computers do stuff random other people\nnormally can't: transfer your money, post to social media as you, read\nyour private documents, control your employer's systems, etc.  If an\nattacker can trick the right systems into thinking the are you, they\ncan take your money, exploit your secrets, or use you to get to\nothers.\n\n</p>\n\n<p>\n\nA strategy of putting in a lot of mental effort to always make the\nright security decision in the moment doesn't work well for humans: we\nmake mistakes, especially when we're doing routine things or are\ndistracted, tired, hungry, etc.  Instead:\n\n</p>\n\n<p>\n\n</p>\n\n<ul>\n<li><p>Use tools so you can't mess up even if you're not paying\n       attention.\n</p></li>\n<li><p>Understand the remaining cases where you do need to take\n       special care.\n</p></li>\n</ul>\n\n\n\n<p>\n\nPassword managers, laptop encryption, and security keys are\nexamples of the former, while being careful with 2FA codes, oAuth\nscreens, and inbound communication are examples of the latter.\n\n</p>\n\n<p>\n\nIn the most common attacks someone gets a copy of what the computer\nchecks to make sure you are you (your \"credentials\").  For example, if\nyour email is protected only with a password then if they can get your\npassword they can log into your email.\n\n</p>\n\n<p>\n\nThe most common way for someone to learn your password is using the\nsame one on multiple sites.  Say you use \"<i>hunter2</i>\" everywhere and you\ncreate an account on \"Joe's Shoes and Wallpaper\" to buy sneakers.\nThey later get hacked, their passwords get cracked, and now the\nattacker knows you used \"<i>hunter2</i>\".  They try this on your email\naccount, learning your address from Joe's records, and it works. This\nis an especially worrying scenario because you probably have a lot of\nother accounts that will send password resets to your email, and now\nthe attacker can control those as well.\n\n</p>\n\n<p>\n\nRemembering passwords for hundreds of sites isn't practical, so you\nwant something that lets you generate a random password for each site\nand then stores it for you: a \"password manager\".  But this isn't\nenough on its own, because the second most common risk to\npasswords is fake login pages.  If you click on a link and get:\n\n</p>\n\n<p>\n\n<a href=\"https://www.jefftk.com/gmail-login-big.png\"><img alt=\"gmail login screen\" class=\"mobile-fullwidth\" height=\"614\" src=\"https://www.jefftk.com/gmail-login.png\" width=\"550\" /><div class=\"image-vertical-spacer\"></div></a>\n\n</p>\n\n<p>\n\nYou want to enter your username and password if this is\n<code>accounts.google.com</code> but not if it's\n<code>accounts.google.com.evil</code>.  Closely examining the URL to\nmake sure it's the right one helps, but humans make mistakes.\nInstead, you want a password manager that, in addition to remembering\nyour passwords, only provides them to login pages on the correct\ndomain.\n\n</p>\n\n<p>\n\nI use <a href=\"https://passwords.google.com/\">Google's password\nmanager</a> which is integrated into Chrome and Android; if you're\nfully in the Apple ecosystem you might use <a href=\"https://support.apple.com/guide/mac-help/use-keychains-to-store-passwords-mchlf375f392/mac\">Apple's\nKeychain</a>.  Firefox also <a href=\"https://support.mozilla.org/en-US/kb/password-manager-remember-delete-edit-logins\">has\none</a>.  Stand-alone password managers include <a href=\"https://bitwarden.com/\">Bitwarden</a> and <a href=\"https://1password.com/\">1Password</a>; if you use one of these\nmake sure you set up browser integration so you're not pasting\npasswords, protecting you against fake login pages.  Use separate\npassword managers (or separate \"vaults\" within a single manager) for\nwork and personal accounts so that when you eventually leave you can\nseparate them cleanly.\n\n</p>\n\n<p>\n\nEven with an autofilling password manager there will be occasional\ntimes when it doesn't work and you need to copy-paste: be very careful\nthat the URL is correct when doing that, because this is exactly the\nproblem you would run into if someone was trying to get your password.\n\n</p>\n\n<p>\n\nAnother layer of protection here is ensuring that a password on its\nown isn't enough to give access to your account.  This is called\n\"two-factor authentication\" or 2FA.  The most common form of 2FA is to\nuse a phone number in addition to a password: when you try to log in\nfrom a new device they text you a code which you can use to\ndemonstrate you have access to the phone number.  This is probably\nmore secure than not doing it, but it isn't very good:\n\n</p>\n\n<p>\n\n</p>\n\n<ul>\n\n<li><p>An attacker could trick the phone company (or bribe an employee)\ninto reassigning your number to them. (\"<a href=\"https://en.wikipedia.org/wiki/SIM_swap_scam\">simjacking</a>\")\n</p></li>\n<li><p>You could be tricked into giving the code to an attacker.\n</p></li>\n<li><p>Sometimes sites call a phone number \"2FA\", but then will let\nsomeone who only controls the phone number reset your password,\nmeaning it's really just a single factor.\n</p></li>\n</ul>\n\n\n\n<p>\n\nThe first two of these can be fixed by using the security key <a href=\"https://support.google.com/accounts/answer/9289445\">built into\nyour phone</a>. You register your key with a site, and then future\nlogins it checks that you still have the same key.  If you're on\n<code>accounts.google.com.evil</code> your key will send something\nthat <code>accounts.google.com</code> will reject.\n\n</p>\n\n<p>\n\nBut what if you lose your phone, or don't have it with you?  The big\nrisk with 2FA is that if you lose your second factor you lose access\nto your account.  The standard solution here is to have multiple\nsecurity keys, so that even if you lose one you still have the others.\nYou can get additional security keys as little USB things.  They come\nin both USB-A and USB-C versions: I like the USB-A ones so I can plug\nthem into USB hubs.  I've used Yubico's <a href=\"https://www.yubico.com/product/security-key-nfc-by-yubico/\">Security\nKey</a> ($25) and Google's <a href=\"https://store.google.com/us/product/titan_security_key\">Titan\nKey</a> ($30).  Looking now, Adafruit's <a href=\"https://www.adafruit.com/product/3363\">FIDO2 Key</a> ($10) seems\nto be the cheapest option, though it doesn't have NFC (fine for your\ncomputer, annoying for your phone).  Having one at work and one at\nhome in addition to the one built into your phone would be ideal, so\nthat even if you lose one and then one breaks, you still have a third.\n\n</p>\n\n<p>\n\nIf you lose a device, you do have some work: for every account it was\nconfigured on you need to unregister it and then register a\nreplacement.  This means you need to keep track of which sites you've\nconfigured 2FA with, because you'll need to repeat that process of\nunregistering the old one and registering a new one on each site.  You\ndon't want to set it up on too many sites: just the ones where the\nconsequences of getting hacked are large enough to justify the extra\nhassle.  I currently use my security keys for five accounts: personal\nGoogle, work Google, GitHub, Facebook, and PyPI.\n\n</p>\n\n<p>\n\nOne way to get the protection of security keys on sites without\nneeding to register your key with them (and the extra work when you\nneed to change keys) is to use oAuth login.  This looks like \"Sign in\nwith Google\", \"Sign in with Apple\", \"Sign in with GitHub\", etc.  I'm\npretty happy using Google's oAuth everywhere: my Google account is\nwell protected and I think Google's security team is very good.\n\n</p>\n\n<p>\n\nOne issues this does have is that if you use a single account as the\nroot of your online identity and then get locked out of that account,\nyou're in a pretty bad situation.  When I've described this approach\n<a href=\"https://news.ycombinator.com/item?id=33936296\">before</a> one\nreaction I've gotten is something like \"but people do get locked out\nof their Google accounts, why would you risk that?\" If you look over\nthe <a href=\"https://hn.algolia.com/?q=google+account+locked+out\">reports\npeople give</a>, though, they're predominately people who set up 2FA and then\nlost the thing they were using as their second factor.  If you make\nsure to always have multiple active 2FA methods (like the three\nsecurity keys I recommend above), however, I think this risk is very\nlow.\n\n</p>\n\n<p>\n\nYou might sometimes see people talking about \"<a href=\"https://en.wikipedia.org/wiki/Time-based_one-time_password\">TOTP</a>\"\nauthentication codes.  These are where you install an app on your\nphone (Google Authenticator, Authy, etc) and configure it when setting\nup 2FA.  It shows a different code every minute, and the site can see\nthe same code.  Every time you log in you provide the code, and unless\nsomeone steals or hacks your phone they won't have it.  I don't think\nTOTP codes make sense anymore: security keys are better (they protect\nyou against fake login pages) and all the sites I used to use codes on\nnow support keys.\n\n</p>\n\n<p>\n\nIn a few years I'm hoping all of this will be a lot simpler as the\nworld moves to <a href=\"https://blog.chromium.org/2022/12/introducing-passkeys-in-chrome.html\">passkeys</a>,\nbut they're not widely supported yet.\n\n</p>\n\n<p>\n\nInstead of someone getting access to your account with a password,\nanother big risk is through a lost laptop.  On a normal laptop someone\nwith a bit of skill can read everything on it, even if you have a\npassword set.  This means someone could act as you on any site you're\ncurrently logged in to.  Encrypting your laptop fixes this, because\nthe data stored on your laptop is now gibberish without your password.\nOn Mac this is <a href=\"https://support.apple.com/en-us/HT204837\">FileVault</a>, on\nWindows it's <a href=\"https://support.microsoft.com/en-us/windows/device-encryption-in-windows-ad5dcf4b-dbe0-2331-228f-7925c2a3012d\">BitLocker</a>;\nUbuntu turns it on <a href=\"https://ubuntu.com/core/docs/uc20/full-disk-encryption\">by\ndefault</a>.  This would be an even bigger risk with phones, since\nthey're smaller and easier to lose, but modern ones are already\nencrypted (<a href=\"https://source.android.com/docs/security/features/encryption\">Android</a>,\n<a href=\"https://support.apple.com/guide/security/encryption-and-data-protection-overview-sece3bee0835/web\">iOS</a>).\n\n</p>\n\n<p>\n\nEven if someone can't log in as you, or steal your laptop and already\nbe logged in as you, they might be able to trick you into delegating\ncontrol to them.  For example, if you try to use Google\nto create a Twitter account you'll see something like:\n\n</p>\n\n<p>\n\n<a href=\"https://www.jefftk.com/sign-in-with-google-big.png\"><img alt=\"oauth screen asking for email address\" class=\"mobile-fullwidth\" height=\"604\" src=\"https://www.jefftk.com/sign-in-with-google.png\" width=\"550\" /><div class=\"image-vertical-spacer\"></div></a>\n\n</p>\n\n<p>\n\nThis is fine: this is the \"oAuth login\" I was talking about above, and\nis saying Twitter will get a few pieces of information, but it won't\nbe able to pull arbitrary things from my Google account.\n\n</p>\n\n<p>\n\nOn the other hand, if you click \"sign in with Google\" on another site\nand see:\n\n</p>\n\n<p>\n\n<a href=\"https://www.jefftk.com/gmail-oauth-read-access-big.png\"><img alt=\"oauth asking to read email\" class=\"mobile-fullwidth\" height=\"768\" src=\"https://www.jefftk.com/gmail-oauth-read-access.png\" width=\"550\" /><div class=\"image-vertical-spacer\"></div></a>\n\n</p>\n\n<p>\n\nYou should be very alarmed!  This is asking for permission to read\nyour email, which as we talked about above translates into control\nover all the accounts which let you reset your password over email.\n\n</p>\n\n<p>\n\nSmall wording differences on these screens can have a very large\neffect, and the wording is something security folks at these companies\nthink really hard about.  For example, someone was <a href=\"https://news.ycombinator.com/item?id=33917962\">recently\ntricked</a> into letting an attacker control their GitHub account\nwhere after clicking \"Sign in with GitHub\" they \"clicked through a\nbunch of pages because its the same drill every time.\"\n\n</p>\n\n<p>\n\nThe last major place where I think extra care is needed is when\nsomeone else contacts you.  If you get a phone call from your bank,\nare you sure it's actually your bank?  If you get an email that it\nsays it's from your IT department, is it actually?  It's generally\nvery hard to tell: they can fake the number they're calling from, or\nthe email address they're sending from.  Or they can just send you\nsomething that looks legitimate enough that you don't think to check.\nThe safest thing to do here, especially if you're unsure, is to look\nup the correct number/address in an external source and initiate\ncommunication yourself.\n\n</p>\n\n<p>\n\nThis does still leave some holes, especially around running software\npast when it will still get security updates, not installing security\nupdates, and installing software and browser extensions, but someone\nwho follows the guidelines above should have a much lower risk of getting\nhacked or phished than the typical person.\n\n</p>\n\n<p>\n\n(This is all looking at things from the perspective of what you as an\nindividual might choose to do to keep your accounts safe.  What sorts\nof policies organizations should have, including options for automatic\nenforcement, is also an interesting and deep topic, which I'm not\ntrying to get into here.)\n\n</p>\n\n<p>\n\n<i>Thanks to Taymon Beal for reading a draft and providing feedback.</i>\n\n  </p>\n\n<p><i>Comment via: <a href=\"https://www.facebook.com/jefftk/posts/pfbid0ptPi9LJbPEvoDLLULXEkC3zkp4awk66GgXhmhndKWkdXBWw9p9ibS5GQmoYKdk2wl\">facebook</a>, <a href=\"https://lesswrong.com/posts/ESp3SsuqWrht7SApu\">lesswrong</a>, <a href=\"https://news.ycombinator.com/item?id=34092956\">hacker news</a>, <a href=\"https://mastodon.mit.edu/@jefftk/109553806777263678\">mastodon</a></i></p>", "link": "https://www.jefftk.com/p/not-getting-hacked", "date_published": "2022-12-21 08:00:00+00:00", "persistent": false, "user": null, "language": "en-US"}]